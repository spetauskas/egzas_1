// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using egzas_1;

#nullable disable

namespace egzas_1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241208192841_2")]
    partial class _2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("AccountPasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("AccountPasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("AccountRole")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("8479310a-b8fd-4cfb-bb78-c69354f96165"),
                            AccountName = "user1",
                            AccountPasswordHash = new byte[] { 75, 108, 243, 223, 41, 243, 55, 201, 187, 72, 81, 221, 8, 72, 202, 255, 239, 137, 73, 208, 103, 203, 1, 158, 48, 41, 126, 74, 18, 13, 223, 42 },
                            AccountPasswordSalt = new byte[] { 47, 80, 32, 138, 253, 247, 110, 67, 229, 87, 175, 227, 113, 204, 85, 69, 177, 3, 74, 118, 195, 66, 91, 99, 241, 152, 19, 245, 214, 216, 134, 22, 112, 186, 197, 29, 187, 150, 249, 5, 255, 23, 74, 31, 199, 3, 40, 94, 59, 145, 125, 227, 12, 59, 213, 66, 120, 233, 182, 170, 230, 37, 159, 229 },
                            AccountRole = "user"
                        },
                        new
                        {
                            AccountId = new Guid("9243f6f3-d5bd-4749-965c-adba719368ad"),
                            AccountName = "user2",
                            AccountPasswordHash = new byte[] { 198, 240, 166, 247, 9, 66, 221, 191, 50, 203, 126, 213, 189, 15, 15, 52, 154, 89, 183, 249, 32, 68, 213, 4, 185, 239, 237, 222, 10, 95, 140, 9 },
                            AccountPasswordSalt = new byte[] { 195, 76, 52, 162, 146, 74, 158, 120, 72, 169, 108, 98, 168, 28, 96, 27, 105, 177, 77, 225, 255, 21, 213, 152, 158, 62, 104, 167, 108, 64, 99, 147, 85, 23, 102, 225, 70, 112, 116, 169, 116, 196, 61, 180, 20, 61, 215, 72, 18, 77, 95, 96, 66, 245, 245, 50, 10, 62, 197, 118, 128, 157, 17, 23 },
                            AccountRole = "user"
                        },
                        new
                        {
                            AccountId = new Guid("e0a1d99d-98b3-4542-9ec0-57516ab0d09d"),
                            AccountName = "user3",
                            AccountPasswordHash = new byte[] { 20, 117, 16, 207, 44, 98, 116, 252, 251, 67, 253, 118, 26, 139, 15, 53, 102, 38, 196, 134, 15, 53, 187, 44, 238, 134, 78, 228, 241, 229, 148, 167 },
                            AccountPasswordSalt = new byte[] { 216, 51, 208, 26, 159, 88, 84, 249, 194, 93, 199, 17, 232, 13, 59, 101, 15, 8, 178, 65, 94, 171, 79, 234, 119, 152, 186, 23, 8, 231, 212, 34, 34, 19, 125, 141, 181, 245, 231, 181, 206, 172, 200, 249, 96, 223, 205, 51, 82, 113, 207, 236, 211, 189, 155, 11, 71, 165, 116, 112, 134, 132, 152, 131 },
                            AccountRole = "user"
                        },
                        new
                        {
                            AccountId = new Guid("f8d98021-5b7e-441a-b39f-cf5d09b2192c"),
                            AccountName = "user4",
                            AccountPasswordHash = new byte[] { 34, 48, 60, 103, 109, 191, 75, 68, 3, 115, 74, 244, 118, 0, 25, 92, 97, 40, 138, 17, 215, 236, 96, 227, 142, 235, 30, 55, 122, 178, 87, 165 },
                            AccountPasswordSalt = new byte[] { 5, 31, 109, 184, 35, 195, 110, 161, 166, 244, 17, 74, 191, 175, 169, 232, 14, 130, 211, 116, 14, 207, 155, 157, 171, 164, 143, 104, 17, 44, 92, 132, 43, 150, 2, 48, 42, 234, 219, 75, 100, 231, 94, 195, 38, 255, 150, 183, 97, 96, 97, 237, 168, 173, 141, 203, 15, 203, 106, 251, 71, 154, 172, 20 },
                            AccountRole = "user"
                        },
                        new
                        {
                            AccountId = new Guid("c411020f-a24f-42a0-98a5-5424db5c668d"),
                            AccountName = "user5",
                            AccountPasswordHash = new byte[] { 74, 30, 56, 59, 224, 16, 11, 65, 196, 165, 35, 138, 221, 57, 95, 13, 27, 107, 85, 248, 222, 65, 85, 47, 42, 41, 117, 152, 21, 85, 104, 61 },
                            AccountPasswordSalt = new byte[] { 124, 100, 35, 0, 187, 61, 7, 29, 137, 146, 5, 57, 168, 17, 132, 253, 58, 254, 81, 200, 62, 61, 164, 73, 158, 68, 35, 217, 246, 235, 173, 35, 75, 190, 145, 86, 231, 218, 250, 36, 226, 221, 246, 81, 143, 83, 66, 143, 219, 188, 91, 86, 73, 27, 174, 0, 243, 129, 248, 227, 104, 72, 68, 200 },
                            AccountRole = "user"
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserIdentityNumber")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserResidenceApartmentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserResidenceCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserResidenceHouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserResidenceStreet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserSurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c32e179-61ad-40b1-919f-b73252008a85"),
                            AccountId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserCountry = "USA",
                            UserEmail = "john.doe@example.com",
                            UserIdentityNumber = 12345,
                            UserName = "John",
                            UserResidenceCity = "New York",
                            UserResidenceHouseNumber = "123",
                            UserResidenceStreet = "Broadway",
                            UserSurName = "Doe"
                        },
                        new
                        {
                            Id = new Guid("f4e371f4-e66f-4944-bdb2-ca6217d316db"),
                            AccountId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserCountry = "Canada",
                            UserEmail = "jane.smith@example.com",
                            UserIdentityNumber = 54321,
                            UserName = "Jane",
                            UserResidenceCity = "Toronto",
                            UserResidenceHouseNumber = "456",
                            UserResidenceStreet = "Queen Street",
                            UserSurName = "Smith"
                        },
                        new
                        {
                            Id = new Guid("61cc02e4-d5d5-4194-9c44-29fb876b3b72"),
                            AccountId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserCountry = "Australia",
                            UserEmail = "alice.johnson@example.com",
                            UserIdentityNumber = 98765,
                            UserName = "Alice",
                            UserResidenceCity = "Sydney",
                            UserResidenceHouseNumber = "789",
                            UserResidenceStreet = "George Street",
                            UserSurName = "Johnson"
                        },
                        new
                        {
                            Id = new Guid("642420fa-6378-42ff-a97e-144416eb1d64"),
                            AccountId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserCountry = "UK",
                            UserEmail = "bob.brown@example.com",
                            UserIdentityNumber = 67890,
                            UserName = "Bob",
                            UserResidenceCity = "London",
                            UserResidenceHouseNumber = "221B",
                            UserResidenceStreet = "Baker Street",
                            UserSurName = "Brown"
                        },
                        new
                        {
                            Id = new Guid("e3956c64-8a27-4708-84a1-2c9eb4141d31"),
                            AccountId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserCountry = "New Zealand",
                            UserEmail = "emily.davis@example.com",
                            UserIdentityNumber = 12321,
                            UserName = "Emily",
                            UserResidenceCity = "Auckland",
                            UserResidenceHouseNumber = "102",
                            UserResidenceStreet = "Victoria Street",
                            UserSurName = "Davis"
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.HasOne("Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Account", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
